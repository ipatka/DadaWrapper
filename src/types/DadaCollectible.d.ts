/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DadaCollectibleInterface extends ethers.utils.Interface {
  functions: {
    "name()": FunctionFragment;
    "flipSwitchTo(bool)": FunctionFragment;
    "transfer(address,uint256,uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "buyCollectible(uint256,uint256)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "acceptBidForCollectible(uint256,uint256,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "makeCollectibleUnavailableToSale(address,uint256,uint256,uint256)": FunctionFragment;
    "OfferedForSale(uint256)": FunctionFragment;
    "offerCollectibleForSaleToAddress(uint256,uint256,uint256,address)": FunctionFragment;
    "DrawingPrintToAddress(uint256)": FunctionFragment;
    "drawingIdToCollectibles(uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "Bids(uint256)": FunctionFragment;
    "enterBidForCollectible(uint256,uint256)": FunctionFragment;
    "mintNewDrawings(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "alt_buyCollectible(uint256,uint256)": FunctionFragment;
    "withdrawOfferForCollectible(uint256,uint256)": FunctionFragment;
    "newCollectible(uint256,string,uint256,uint256,uint256,string,uint256,string)": FunctionFragment;
    "offerCollectibleForSale(uint256,uint256,uint256)": FunctionFragment;
    "pendingWithdrawals(address)": FunctionFragment;
    "withdrawBidForCollectible(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flipSwitchTo",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyCollectible",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptBidForCollectible",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "makeCollectibleUnavailableToSale",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "OfferedForSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offerCollectibleForSaleToAddress",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "DrawingPrintToAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "drawingIdToCollectibles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "Bids", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "enterBidForCollectible",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNewDrawings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "alt_buyCollectible",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOfferForCollectible",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newCollectible",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "offerCollectibleForSale",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBidForCollectible",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flipSwitchTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyCollectible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptBidForCollectible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeCollectibleUnavailableToSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OfferedForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerCollectibleForSaleToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DrawingPrintToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "drawingIdToCollectibles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Bids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enterBidForCollectible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintNewDrawings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "alt_buyCollectible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOfferForCollectible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newCollectible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerCollectibleForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBidForCollectible",
    data: BytesLike
  ): Result;

  events: {
    "Assigned(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "CollectibleTransfer(address,address,uint256,uint256)": EventFragment;
    "CollectibleOffered(uint256,uint256,uint256,address,uint256)": EventFragment;
    "CollectibleBidEntered(uint256,uint256,uint256,address)": EventFragment;
    "CollectibleBidWithdrawn(uint256,uint256,uint256,address)": EventFragment;
    "CollectibleBought(uint256,uint256,uint256,address,address)": EventFragment;
    "CollectibleNoLongerForSale(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Assigned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectibleTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectibleOffered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectibleBidEntered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectibleBidWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectibleBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectibleNoLongerForSale"): EventFragment;
}

export class DadaCollectible extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DadaCollectibleInterface;

  functions: {
    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    flipSwitchTo(
      state: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "flipSwitchTo(bool)"(
      state: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transfer(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256,uint256)"(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    buyCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "buyCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    acceptBidForCollectible(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "acceptBidForCollectible(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

    makeCollectibleUnavailableToSale(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      lastSellValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "makeCollectibleUnavailableToSale(address,uint256,uint256,uint256)"(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      lastSellValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    OfferedForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isForSale: boolean;
      drawingId: BigNumber;
      printIndex: BigNumber;
      seller: string;
      minValue: BigNumber;
      onlySellTo: string;
      lastSellValue: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: string;
      6: BigNumber;
    }>;

    "OfferedForSale(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isForSale: boolean;
      drawingId: BigNumber;
      printIndex: BigNumber;
      seller: string;
      minValue: BigNumber;
      onlySellTo: string;
      lastSellValue: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: string;
      6: BigNumber;
    }>;

    offerCollectibleForSaleToAddress(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "offerCollectibleForSaleToAddress(uint256,uint256,uint256,address)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    DrawingPrintToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "DrawingPrintToAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    drawingIdToCollectibles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      drawingId: BigNumber;
      checkSum: string;
      totalSupply: BigNumber;
      nextPrintIndexToAssign: BigNumber;
      allPrintsAssigned: boolean;
      initialPrice: BigNumber;
      initialPrintIndex: BigNumber;
      collectionName: string;
      authorUId: BigNumber;
      scarcity: string;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: string;
    }>;

    "drawingIdToCollectibles(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      drawingId: BigNumber;
      checkSum: string;
      totalSupply: BigNumber;
      nextPrintIndexToAssign: BigNumber;
      allPrintsAssigned: boolean;
      initialPrice: BigNumber;
      initialPrintIndex: BigNumber;
      collectionName: string;
      authorUId: BigNumber;
      scarcity: string;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: string;
    }>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    Bids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      hasBid: boolean;
      drawingId: BigNumber;
      printIndex: BigNumber;
      bidder: string;
      value: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
    }>;

    "Bids(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      hasBid: boolean;
      drawingId: BigNumber;
      printIndex: BigNumber;
      bidder: string;
      value: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
    }>;

    enterBidForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "enterBidForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    mintNewDrawings(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintNewDrawings(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    alt_buyCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "alt_buyCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    withdrawOfferForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawOfferForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    newCollectible(
      drawingId: BigNumberish,
      checkSum: string,
      _totalSupply: BigNumberish,
      initialPrice: BigNumberish,
      initialPrintIndex: BigNumberish,
      collectionName: string,
      authorUId: BigNumberish,
      scarcity: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newCollectible(uint256,string,uint256,uint256,uint256,string,uint256,string)"(
      drawingId: BigNumberish,
      checkSum: string,
      _totalSupply: BigNumberish,
      initialPrice: BigNumberish,
      initialPrintIndex: BigNumberish,
      collectionName: string,
      authorUId: BigNumberish,
      scarcity: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    offerCollectibleForSale(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "offerCollectibleForSale(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pendingWithdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "pendingWithdrawals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    withdrawBidForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawBidForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  flipSwitchTo(
    state: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "flipSwitchTo(bool)"(
    state: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transfer(
    to: string,
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256,uint256)"(
    to: string,
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  buyCollectible(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "buyCollectible(uint256,uint256)"(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  acceptBidForCollectible(
    drawingId: BigNumberish,
    minPrice: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "acceptBidForCollectible(uint256,uint256,uint256)"(
    drawingId: BigNumberish,
    minPrice: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  makeCollectibleUnavailableToSale(
    to: string,
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    lastSellValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "makeCollectibleUnavailableToSale(address,uint256,uint256,uint256)"(
    to: string,
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    lastSellValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  OfferedForSale(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    isForSale: boolean;
    drawingId: BigNumber;
    printIndex: BigNumber;
    seller: string;
    minValue: BigNumber;
    onlySellTo: string;
    lastSellValue: BigNumber;
    0: boolean;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: string;
    6: BigNumber;
  }>;

  "OfferedForSale(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    isForSale: boolean;
    drawingId: BigNumber;
    printIndex: BigNumber;
    seller: string;
    minValue: BigNumber;
    onlySellTo: string;
    lastSellValue: BigNumber;
    0: boolean;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: string;
    6: BigNumber;
  }>;

  offerCollectibleForSaleToAddress(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    minSalePriceInWei: BigNumberish,
    toAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "offerCollectibleForSaleToAddress(uint256,uint256,uint256,address)"(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    minSalePriceInWei: BigNumberish,
    toAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  DrawingPrintToAddress(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "DrawingPrintToAddress(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  drawingIdToCollectibles(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    drawingId: BigNumber;
    checkSum: string;
    totalSupply: BigNumber;
    nextPrintIndexToAssign: BigNumber;
    allPrintsAssigned: boolean;
    initialPrice: BigNumber;
    initialPrintIndex: BigNumber;
    collectionName: string;
    authorUId: BigNumber;
    scarcity: string;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: boolean;
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: BigNumber;
    9: string;
  }>;

  "drawingIdToCollectibles(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    drawingId: BigNumber;
    checkSum: string;
    totalSupply: BigNumber;
    nextPrintIndexToAssign: BigNumber;
    allPrintsAssigned: boolean;
    initialPrice: BigNumber;
    initialPrintIndex: BigNumber;
    collectionName: string;
    authorUId: BigNumber;
    scarcity: string;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: boolean;
    5: BigNumber;
    6: BigNumber;
    7: string;
    8: BigNumber;
    9: string;
  }>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  Bids(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    hasBid: boolean;
    drawingId: BigNumber;
    printIndex: BigNumber;
    bidder: string;
    value: BigNumber;
    0: boolean;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
  }>;

  "Bids(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    hasBid: boolean;
    drawingId: BigNumber;
    printIndex: BigNumber;
    bidder: string;
    value: BigNumber;
    0: boolean;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
  }>;

  enterBidForCollectible(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "enterBidForCollectible(uint256,uint256)"(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  mintNewDrawings(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintNewDrawings(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  alt_buyCollectible(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "alt_buyCollectible(uint256,uint256)"(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  withdrawOfferForCollectible(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawOfferForCollectible(uint256,uint256)"(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  newCollectible(
    drawingId: BigNumberish,
    checkSum: string,
    _totalSupply: BigNumberish,
    initialPrice: BigNumberish,
    initialPrintIndex: BigNumberish,
    collectionName: string,
    authorUId: BigNumberish,
    scarcity: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newCollectible(uint256,string,uint256,uint256,uint256,string,uint256,string)"(
    drawingId: BigNumberish,
    checkSum: string,
    _totalSupply: BigNumberish,
    initialPrice: BigNumberish,
    initialPrintIndex: BigNumberish,
    collectionName: string,
    authorUId: BigNumberish,
    scarcity: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  offerCollectibleForSale(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    minSalePriceInWei: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "offerCollectibleForSale(uint256,uint256,uint256)"(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    minSalePriceInWei: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pendingWithdrawals(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingWithdrawals(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawBidForCollectible(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawBidForCollectible(uint256,uint256)"(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    flipSwitchTo(state: boolean, overrides?: CallOverrides): Promise<void>;

    "flipSwitchTo(bool)"(
      state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transfer(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256,uint256)"(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "buyCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    acceptBidForCollectible(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptBidForCollectible(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;

    makeCollectibleUnavailableToSale(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      lastSellValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "makeCollectibleUnavailableToSale(address,uint256,uint256,uint256)"(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      lastSellValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    OfferedForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isForSale: boolean;
      drawingId: BigNumber;
      printIndex: BigNumber;
      seller: string;
      minValue: BigNumber;
      onlySellTo: string;
      lastSellValue: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: string;
      6: BigNumber;
    }>;

    "OfferedForSale(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isForSale: boolean;
      drawingId: BigNumber;
      printIndex: BigNumber;
      seller: string;
      minValue: BigNumber;
      onlySellTo: string;
      lastSellValue: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: string;
      6: BigNumber;
    }>;

    offerCollectibleForSaleToAddress(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "offerCollectibleForSaleToAddress(uint256,uint256,uint256,address)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    DrawingPrintToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "DrawingPrintToAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    drawingIdToCollectibles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      drawingId: BigNumber;
      checkSum: string;
      totalSupply: BigNumber;
      nextPrintIndexToAssign: BigNumber;
      allPrintsAssigned: boolean;
      initialPrice: BigNumber;
      initialPrintIndex: BigNumber;
      collectionName: string;
      authorUId: BigNumber;
      scarcity: string;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: string;
    }>;

    "drawingIdToCollectibles(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      drawingId: BigNumber;
      checkSum: string;
      totalSupply: BigNumber;
      nextPrintIndexToAssign: BigNumber;
      allPrintsAssigned: boolean;
      initialPrice: BigNumber;
      initialPrintIndex: BigNumber;
      collectionName: string;
      authorUId: BigNumber;
      scarcity: string;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: boolean;
      5: BigNumber;
      6: BigNumber;
      7: string;
      8: BigNumber;
      9: string;
    }>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Bids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      hasBid: boolean;
      drawingId: BigNumber;
      printIndex: BigNumber;
      bidder: string;
      value: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
    }>;

    "Bids(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      hasBid: boolean;
      drawingId: BigNumber;
      printIndex: BigNumber;
      bidder: string;
      value: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
    }>;

    enterBidForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "enterBidForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintNewDrawings(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintNewDrawings(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    alt_buyCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "alt_buyCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawOfferForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawOfferForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    newCollectible(
      drawingId: BigNumberish,
      checkSum: string,
      _totalSupply: BigNumberish,
      initialPrice: BigNumberish,
      initialPrintIndex: BigNumberish,
      collectionName: string,
      authorUId: BigNumberish,
      scarcity: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "newCollectible(uint256,string,uint256,uint256,uint256,string,uint256,string)"(
      drawingId: BigNumberish,
      checkSum: string,
      _totalSupply: BigNumberish,
      initialPrice: BigNumberish,
      initialPrintIndex: BigNumberish,
      collectionName: string,
      authorUId: BigNumberish,
      scarcity: string,
      overrides?: CallOverrides
    ): Promise<void>;

    offerCollectibleForSale(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "offerCollectibleForSale(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingWithdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingWithdrawals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawBidForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawBidForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Assigned(
      to: string | null,
      collectibleIndex: null,
      printIndex: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    CollectibleTransfer(
      from: string | null,
      to: string | null,
      collectibleIndex: null,
      printIndex: null
    ): EventFilter;

    CollectibleOffered(
      collectibleIndex: BigNumberish | null,
      printIndex: BigNumberish | null,
      minValue: null,
      toAddress: string | null,
      lastSellValue: null
    ): EventFilter;

    CollectibleBidEntered(
      collectibleIndex: BigNumberish | null,
      printIndex: BigNumberish | null,
      value: null,
      fromAddress: string | null
    ): EventFilter;

    CollectibleBidWithdrawn(
      collectibleIndex: BigNumberish | null,
      printIndex: BigNumberish | null,
      value: null,
      fromAddress: string | null
    ): EventFilter;

    CollectibleBought(
      collectibleIndex: BigNumberish | null,
      printIndex: null,
      value: null,
      fromAddress: string | null,
      toAddress: string | null
    ): EventFilter;

    CollectibleNoLongerForSale(
      collectibleIndex: BigNumberish | null,
      printIndex: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    flipSwitchTo(state: boolean, overrides?: Overrides): Promise<BigNumber>;

    "flipSwitchTo(bool)"(
      state: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transfer(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256,uint256)"(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    buyCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "buyCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    acceptBidForCollectible(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "acceptBidForCollectible(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides): Promise<BigNumber>;

    "withdraw()"(overrides?: Overrides): Promise<BigNumber>;

    makeCollectibleUnavailableToSale(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      lastSellValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "makeCollectibleUnavailableToSale(address,uint256,uint256,uint256)"(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      lastSellValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    OfferedForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "OfferedForSale(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerCollectibleForSaleToAddress(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "offerCollectibleForSaleToAddress(uint256,uint256,uint256,address)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    DrawingPrintToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "DrawingPrintToAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    drawingIdToCollectibles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "drawingIdToCollectibles(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Bids(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "Bids(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enterBidForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "enterBidForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    mintNewDrawings(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintNewDrawings(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    alt_buyCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "alt_buyCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    withdrawOfferForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawOfferForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    newCollectible(
      drawingId: BigNumberish,
      checkSum: string,
      _totalSupply: BigNumberish,
      initialPrice: BigNumberish,
      initialPrintIndex: BigNumberish,
      collectionName: string,
      authorUId: BigNumberish,
      scarcity: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newCollectible(uint256,string,uint256,uint256,uint256,string,uint256,string)"(
      drawingId: BigNumberish,
      checkSum: string,
      _totalSupply: BigNumberish,
      initialPrice: BigNumberish,
      initialPrintIndex: BigNumberish,
      collectionName: string,
      authorUId: BigNumberish,
      scarcity: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    offerCollectibleForSale(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "offerCollectibleForSale(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    pendingWithdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingWithdrawals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawBidForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawBidForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flipSwitchTo(
      state: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "flipSwitchTo(bool)"(
      state: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256,uint256)"(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "buyCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptBidForCollectible(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "acceptBidForCollectible(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    makeCollectibleUnavailableToSale(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      lastSellValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "makeCollectibleUnavailableToSale(address,uint256,uint256,uint256)"(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      lastSellValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    OfferedForSale(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "OfferedForSale(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerCollectibleForSaleToAddress(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "offerCollectibleForSaleToAddress(uint256,uint256,uint256,address)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    DrawingPrintToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DrawingPrintToAddress(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    drawingIdToCollectibles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "drawingIdToCollectibles(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Bids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "Bids(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enterBidForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "enterBidForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    mintNewDrawings(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintNewDrawings(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    alt_buyCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "alt_buyCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    withdrawOfferForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawOfferForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    newCollectible(
      drawingId: BigNumberish,
      checkSum: string,
      _totalSupply: BigNumberish,
      initialPrice: BigNumberish,
      initialPrintIndex: BigNumberish,
      collectionName: string,
      authorUId: BigNumberish,
      scarcity: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newCollectible(uint256,string,uint256,uint256,uint256,string,uint256,string)"(
      drawingId: BigNumberish,
      checkSum: string,
      _totalSupply: BigNumberish,
      initialPrice: BigNumberish,
      initialPrintIndex: BigNumberish,
      collectionName: string,
      authorUId: BigNumberish,
      scarcity: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    offerCollectibleForSale(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "offerCollectibleForSale(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pendingWithdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingWithdrawals(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawBidForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawBidForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
