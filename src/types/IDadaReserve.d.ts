/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IDadaReserveInterface extends ethers.utils.Interface {
  functions: {
    "acceptBidForCollectible(uint256,uint256,uint256)": FunctionFragment;
    "offerCollectibleForSale(uint256,uint256,uint256)": FunctionFragment;
    "offerCollectibleForSaleToAddress(uint256,uint256,uint256,address)": FunctionFragment;
    "transfer(address,uint256,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawOfferForCollectible(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptBidForCollectible",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offerCollectibleForSale",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offerCollectibleForSaleToAddress",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawOfferForCollectible",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptBidForCollectible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerCollectibleForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerCollectibleForSaleToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOfferForCollectible",
    data: BytesLike
  ): Result;

  events: {};
}

export class IDadaReserve extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IDadaReserveInterface;

  functions: {
    acceptBidForCollectible(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "acceptBidForCollectible(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    offerCollectibleForSale(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "offerCollectibleForSale(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    offerCollectibleForSaleToAddress(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "offerCollectibleForSaleToAddress(uint256,uint256,uint256,address)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transfer(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256,uint256)"(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawOfferForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawOfferForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  acceptBidForCollectible(
    drawingId: BigNumberish,
    minPrice: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "acceptBidForCollectible(uint256,uint256,uint256)"(
    drawingId: BigNumberish,
    minPrice: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  offerCollectibleForSale(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    minSalePriceInWei: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "offerCollectibleForSale(uint256,uint256,uint256)"(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    minSalePriceInWei: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  offerCollectibleForSaleToAddress(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    minSalePriceInWei: BigNumberish,
    toAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "offerCollectibleForSaleToAddress(uint256,uint256,uint256,address)"(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    minSalePriceInWei: BigNumberish,
    toAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transfer(
    to: string,
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256,uint256)"(
    to: string,
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawOfferForCollectible(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawOfferForCollectible(uint256,uint256)"(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptBidForCollectible(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptBidForCollectible(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    offerCollectibleForSale(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "offerCollectibleForSale(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    offerCollectibleForSaleToAddress(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "offerCollectibleForSaleToAddress(uint256,uint256,uint256,address)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transfer(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transfer(address,uint256,uint256)"(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;

    withdrawOfferForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawOfferForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    acceptBidForCollectible(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "acceptBidForCollectible(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    offerCollectibleForSale(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "offerCollectibleForSale(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    offerCollectibleForSaleToAddress(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "offerCollectibleForSaleToAddress(uint256,uint256,uint256,address)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transfer(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256,uint256)"(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides): Promise<BigNumber>;

    "withdraw()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawOfferForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawOfferForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBidForCollectible(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "acceptBidForCollectible(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    offerCollectibleForSale(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "offerCollectibleForSale(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    offerCollectibleForSaleToAddress(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "offerCollectibleForSaleToAddress(uint256,uint256,uint256,address)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256,uint256)"(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawOfferForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawOfferForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
