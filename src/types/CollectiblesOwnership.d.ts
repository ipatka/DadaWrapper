/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CollectiblesOwnershipInterface extends ethers.utils.Interface {
  functions: {
    "supportsInterface(bytes4)": FunctionFragment;
    "cfoAddress()": FunctionFragment;
    "name()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "collectibles(uint256)": FunctionFragment;
    "ceoAddress()": FunctionFragment;
    "implementsERC721()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "collectiblePrintNumber(uint256)": FunctionFragment;
    "setWithdrawalAddress(address)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "setCEO(address)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "setCOO(address)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "collectibleIssuedTime(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "performProfitDistribution(uint256,uint256)": FunctionFragment;
    "setCFO(address)": FunctionFragment;
    "pushCollectible(uint256,uint256)": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "dadaPercentageFirstBuy()": FunctionFragment;
    "tokensOf(address)": FunctionFragment;
    "paused()": FunctionFragment;
    "withdrawBalance()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "emitCollectibleIssuedEvent(address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "collectionBaseItemPriceOf(uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "m_asset()": FunctionFragment;
    "upgradeCollectionBaseItemModelContract(address)": FunctionFragment;
    "pause()": FunctionFragment;
    "tokenLastPrice(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "isCollectionBaseItemActive(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "setClaimEnabler(address)": FunctionFragment;
    "upgradeExhibitModelContract(address)": FunctionFragment;
    "collectibleInfo(uint256)": FunctionFragment;
    "purchaseOneUnitInStock(uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "cooAddress()": FunctionFragment;
    "m_collectionBaseItem()": FunctionFragment;
    "dadaPercentage()": FunctionFragment;
    "upgradeAssetModelContract(address)": FunctionFragment;
    "tokenOwnerPercentage()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "artistPercentage()": FunctionFragment;
    "setAuthorizationStatus(address,bool)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "artistPercentageFirstBuy()": FunctionFragment;
    "withdrawalAddress()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "getCollectionBaseItemId(uint256)": FunctionFragment;
    "m_exhibit()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cfoAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectibles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ceoAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementsERC721",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectiblePrintNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setCEO", values: [string]): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(functionFragment: "setCOO", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collectibleIssuedTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "performProfitDistribution",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setCFO", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pushCollectible",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dadaPercentageFirstBuy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokensOf", values: [string]): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitCollectibleIssuedEvent",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionBaseItemPriceOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "m_asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeCollectionBaseItemModelContract",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenLastPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isCollectionBaseItemActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setClaimEnabler",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeExhibitModelContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collectibleInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseOneUnitInStock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "cooAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "m_collectionBaseItem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dadaPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeAssetModelContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwnerPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "artistPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizationStatus",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "artistPercentageFirstBuy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionBaseItemId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "m_exhibit", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cfoAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectibles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ceoAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementsERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectiblePrintNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCEO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCOO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectibleIssuedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performProfitDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCFO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pushCollectible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dadaPercentageFirstBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokensOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitCollectibleIssuedEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionBaseItemPriceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "m_asset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeCollectionBaseItemModelContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenLastPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCollectionBaseItemActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClaimEnabler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeExhibitModelContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectibleInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseOneUnitInStock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cooAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "m_collectionBaseItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dadaPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeAssetModelContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOwnerPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "artistPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "artistPercentageFirstBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionBaseItemId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "m_exhibit", data: BytesLike): Result;

  events: {
    "Withdraw(address,uint256)": EventFragment;
    "CollectibleIssued(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "ContractUpgrade(address)": EventFragment;
    "Paused()": EventFragment;
    "Unpaused()": EventFragment;
    "Pause()": EventFragment;
    "Unpause()": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectibleIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractUpgrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
}

export class CollectiblesOwnership extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CollectiblesOwnershipInterface;

  functions: {
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    cfoAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "cfoAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    collectibles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      collectionBaseItemId: BigNumber;
      issuedTime: BigNumber;
      printNumber: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "collectibles(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      collectionBaseItemId: BigNumber;
      issuedTime: BigNumber;
      printNumber: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    ceoAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ceoAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    implementsERC721(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "implementsERC721()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    collectiblePrintNumber(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "collectiblePrintNumber(uint256)"(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setWithdrawalAddress(
      _newWithdrawalAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWithdrawalAddress(address)"(
      _newWithdrawalAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    setCEO(
      _newCEO: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCEO(address)"(
      _newCEO: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setCOO(
      _newCOO: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCOO(address)"(
      _newCOO: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    withdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

    collectibleIssuedTime(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "collectibleIssuedTime(uint256)"(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

    mint(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    performProfitDistribution(
      _tokenId: BigNumberish,
      _collectionBaseItemId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "performProfitDistribution(uint256,uint256)"(
      _tokenId: BigNumberish,
      _collectionBaseItemId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    setCFO(
      _newCFO: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCFO(address)"(
      _newCFO: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pushCollectible(
      _collectionBaseItemId: BigNumberish,
      _issuedTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "pushCollectible(uint256,uint256)"(
      _collectionBaseItemId: BigNumberish,
      _issuedTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    dadaPercentageFirstBuy(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "dadaPercentageFirstBuy()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    tokensOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    "tokensOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber[];
    }>;

    paused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "paused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    withdrawBalance(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawBalance()"(overrides?: Overrides): Promise<ContractTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    emitCollectibleIssuedEvent(
      _collectibleOwner: string,
      _purchaser: string,
      _collectibleId: BigNumberish,
      _collectionBaseItemId: BigNumberish,
      _issuedTime: BigNumberish,
      _printNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emitCollectibleIssuedEvent(address,address,uint256,uint256,uint256,uint256)"(
      _collectibleOwner: string,
      _purchaser: string,
      _collectibleId: BigNumberish,
      _collectionBaseItemId: BigNumberish,
      _issuedTime: BigNumberish,
      _printNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    collectionBaseItemPriceOf(
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "collectionBaseItemPriceOf(uint256)"(
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    m_asset(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "m_asset()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    upgradeCollectionBaseItemModelContract(
      newCollectionBaseItemModelContractAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeCollectionBaseItemModelContract(address)"(
      newCollectionBaseItemModelContractAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    tokenLastPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tokenLastPrice(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    isOwner(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "isOwner()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    isCollectionBaseItemActive(
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isCollectionBaseItemActive(uint256)"(
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    setClaimEnabler(
      claimEnablerContractAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setClaimEnabler(address)"(
      claimEnablerContractAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeExhibitModelContract(
      newExhibitModelContractAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeExhibitModelContract(address)"(
      newExhibitModelContractAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    collectibleInfo(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: string;
      9: string;
    }>;

    "collectibleInfo(uint256)"(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: string;
      9: string;
    }>;

    purchaseOneUnitInStock(
      _collectionBaseItemId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "purchaseOneUnitInStock(uint256)"(
      _collectionBaseItemId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      to: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cooAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "cooAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    m_collectionBaseItem(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "m_collectionBaseItem()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    dadaPercentage(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "dadaPercentage()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    upgradeAssetModelContract(
      newAssetModelContractAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeAssetModelContract(address)"(
      newAssetModelContractAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenOwnerPercentage(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "tokenOwnerPercentage()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    artistPercentage(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "artistPercentage()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    setAuthorizationStatus(
      _authorizedAddress: string,
      _authorizedStatus: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAuthorizationStatus(address,bool)"(
      _authorizedAddress: string,
      _authorizedStatus: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    artistPercentageFirstBuy(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "artistPercentageFirstBuy()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    withdrawalAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "withdrawalAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getCollectionBaseItemId(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getCollectionBaseItemId(uint256)"(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    m_exhibit(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "m_exhibit()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cfoAddress(overrides?: CallOverrides): Promise<string>;

  "cfoAddress()"(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  collectibles(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    collectionBaseItemId: BigNumber;
    issuedTime: BigNumber;
    printNumber: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "collectibles(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    collectionBaseItemId: BigNumber;
    issuedTime: BigNumber;
    printNumber: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  ceoAddress(overrides?: CallOverrides): Promise<string>;

  "ceoAddress()"(overrides?: CallOverrides): Promise<string>;

  implementsERC721(overrides?: CallOverrides): Promise<boolean>;

  "implementsERC721()"(overrides?: CallOverrides): Promise<boolean>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  collectiblePrintNumber(
    _collectibleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "collectiblePrintNumber(uint256)"(
    _collectibleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setWithdrawalAddress(
    _newWithdrawalAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWithdrawalAddress(address)"(
    _newWithdrawalAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  setCEO(_newCEO: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setCEO(address)"(
    _newCEO: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setCOO(_newCOO: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setCOO(address)"(
    _newCOO: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenOfOwnerByIndex(address,uint256)"(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  collectibleIssuedTime(
    _collectibleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "collectibleIssuedTime(uint256)"(
    _collectibleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  mint(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  performProfitDistribution(
    _tokenId: BigNumberish,
    _collectionBaseItemId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "performProfitDistribution(uint256,uint256)"(
    _tokenId: BigNumberish,
    _collectionBaseItemId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  setCFO(_newCFO: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setCFO(address)"(
    _newCFO: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pushCollectible(
    _collectionBaseItemId: BigNumberish,
    _issuedTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "pushCollectible(uint256,uint256)"(
    _collectionBaseItemId: BigNumberish,
    _issuedTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenByIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dadaPercentageFirstBuy(overrides?: CallOverrides): Promise<BigNumber>;

  "dadaPercentageFirstBuy()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokensOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  "tokensOf(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  withdrawBalance(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawBalance()"(overrides?: Overrides): Promise<ContractTransaction>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  emitCollectibleIssuedEvent(
    _collectibleOwner: string,
    _purchaser: string,
    _collectibleId: BigNumberish,
    _collectionBaseItemId: BigNumberish,
    _issuedTime: BigNumberish,
    _printNumber: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emitCollectibleIssuedEvent(address,address,uint256,uint256,uint256,uint256)"(
    _collectibleOwner: string,
    _purchaser: string,
    _collectibleId: BigNumberish,
    _collectionBaseItemId: BigNumberish,
    _issuedTime: BigNumberish,
    _printNumber: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  collectionBaseItemPriceOf(
    _collectionBaseItemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "collectionBaseItemPriceOf(uint256)"(
    _collectionBaseItemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  m_asset(overrides?: CallOverrides): Promise<string>;

  "m_asset()"(overrides?: CallOverrides): Promise<string>;

  upgradeCollectionBaseItemModelContract(
    newCollectionBaseItemModelContractAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeCollectionBaseItemModelContract(address)"(
    newCollectionBaseItemModelContractAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  tokenLastPrice(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenLastPrice(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  isCollectionBaseItemActive(
    _collectionBaseItemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isCollectionBaseItemActive(uint256)"(
    _collectionBaseItemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  setClaimEnabler(
    claimEnablerContractAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setClaimEnabler(address)"(
    claimEnablerContractAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeExhibitModelContract(
    newExhibitModelContractAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeExhibitModelContract(address)"(
    newExhibitModelContractAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  collectibleInfo(
    _collectibleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: string;
    9: string;
  }>;

  "collectibleInfo(uint256)"(
    _collectibleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: string;
    9: string;
  }>;

  purchaseOneUnitInStock(
    _collectionBaseItemId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "purchaseOneUnitInStock(uint256)"(
    _collectionBaseItemId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    to: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    to: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cooAddress(overrides?: CallOverrides): Promise<string>;

  "cooAddress()"(overrides?: CallOverrides): Promise<string>;

  m_collectionBaseItem(overrides?: CallOverrides): Promise<string>;

  "m_collectionBaseItem()"(overrides?: CallOverrides): Promise<string>;

  dadaPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  "dadaPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

  upgradeAssetModelContract(
    newAssetModelContractAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeAssetModelContract(address)"(
    newAssetModelContractAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenOwnerPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  "tokenOwnerPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  artistPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  "artistPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

  setAuthorizationStatus(
    _authorizedAddress: string,
    _authorizedStatus: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAuthorizationStatus(address,bool)"(
    _authorizedAddress: string,
    _authorizedStatus: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  artistPercentageFirstBuy(overrides?: CallOverrides): Promise<BigNumber>;

  "artistPercentageFirstBuy()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalAddress(overrides?: CallOverrides): Promise<string>;

  "withdrawalAddress()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getCollectionBaseItemId(
    _collectibleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCollectionBaseItemId(uint256)"(
    _collectibleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  m_exhibit(overrides?: CallOverrides): Promise<string>;

  "m_exhibit()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cfoAddress(overrides?: CallOverrides): Promise<string>;

    "cfoAddress()"(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collectibles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      collectionBaseItemId: BigNumber;
      issuedTime: BigNumber;
      printNumber: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "collectibles(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      collectionBaseItemId: BigNumber;
      issuedTime: BigNumber;
      printNumber: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    ceoAddress(overrides?: CallOverrides): Promise<string>;

    "ceoAddress()"(overrides?: CallOverrides): Promise<string>;

    implementsERC721(overrides?: CallOverrides): Promise<boolean>;

    "implementsERC721()"(overrides?: CallOverrides): Promise<boolean>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    collectiblePrintNumber(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collectiblePrintNumber(uint256)"(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setWithdrawalAddress(
      _newWithdrawalAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWithdrawalAddress(address)"(
      _newWithdrawalAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCEO(_newCEO: string, overrides?: CallOverrides): Promise<void>;

    "setCEO(address)"(
      _newCEO: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCOO(_newCOO: string, overrides?: CallOverrides): Promise<void>;

    "setCOO(address)"(
      _newCOO: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;

    collectibleIssuedTime(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collectibleIssuedTime(uint256)"(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    mint(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "mint(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    performProfitDistribution(
      _tokenId: BigNumberish,
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "performProfitDistribution(uint256,uint256)"(
      _tokenId: BigNumberish,
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCFO(_newCFO: string, overrides?: CallOverrides): Promise<void>;

    "setCFO(address)"(
      _newCFO: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pushCollectible(
      _collectionBaseItemId: BigNumberish,
      _issuedTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "pushCollectible(uint256,uint256)"(
      _collectionBaseItemId: BigNumberish,
      _issuedTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dadaPercentageFirstBuy(overrides?: CallOverrides): Promise<BigNumber>;

    "dadaPercentageFirstBuy()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokensOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    "tokensOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    withdrawBalance(overrides?: CallOverrides): Promise<void>;

    "withdrawBalance()"(overrides?: CallOverrides): Promise<void>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    emitCollectibleIssuedEvent(
      _collectibleOwner: string,
      _purchaser: string,
      _collectibleId: BigNumberish,
      _collectionBaseItemId: BigNumberish,
      _issuedTime: BigNumberish,
      _printNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emitCollectibleIssuedEvent(address,address,uint256,uint256,uint256,uint256)"(
      _collectibleOwner: string,
      _purchaser: string,
      _collectibleId: BigNumberish,
      _collectionBaseItemId: BigNumberish,
      _issuedTime: BigNumberish,
      _printNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collectionBaseItemPriceOf(
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collectionBaseItemPriceOf(uint256)"(
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    m_asset(overrides?: CallOverrides): Promise<string>;

    "m_asset()"(overrides?: CallOverrides): Promise<string>;

    upgradeCollectionBaseItemModelContract(
      newCollectionBaseItemModelContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeCollectionBaseItemModelContract(address)"(
      newCollectionBaseItemModelContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    tokenLastPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenLastPrice(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    isCollectionBaseItemActive(
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isCollectionBaseItemActive(uint256)"(
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    setClaimEnabler(
      claimEnablerContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setClaimEnabler(address)"(
      claimEnablerContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeExhibitModelContract(
      newExhibitModelContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeExhibitModelContract(address)"(
      newExhibitModelContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    collectibleInfo(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: string;
      9: string;
    }>;

    "collectibleInfo(uint256)"(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: string;
      9: string;
    }>;

    purchaseOneUnitInStock(
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "purchaseOneUnitInStock(uint256)"(
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      to: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    cooAddress(overrides?: CallOverrides): Promise<string>;

    "cooAddress()"(overrides?: CallOverrides): Promise<string>;

    m_collectionBaseItem(overrides?: CallOverrides): Promise<string>;

    "m_collectionBaseItem()"(overrides?: CallOverrides): Promise<string>;

    dadaPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "dadaPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeAssetModelContract(
      newAssetModelContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeAssetModelContract(address)"(
      newAssetModelContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenOwnerPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenOwnerPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    artistPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "artistPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthorizationStatus(
      _authorizedAddress: string,
      _authorizedStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuthorizationStatus(address,bool)"(
      _authorizedAddress: string,
      _authorizedStatus: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    artistPercentageFirstBuy(overrides?: CallOverrides): Promise<BigNumber>;

    "artistPercentageFirstBuy()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalAddress(overrides?: CallOverrides): Promise<string>;

    "withdrawalAddress()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getCollectionBaseItemId(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollectionBaseItemId(uint256)"(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    m_exhibit(overrides?: CallOverrides): Promise<string>;

    "m_exhibit()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Withdraw(to: null, amount: null): EventFilter;

    CollectibleIssued(
      collectibleOwner: string | null,
      purchaser: string | null,
      collectibleId: null,
      collectionBaseItemId: null,
      issuedTime: null,
      printNumber: null
    ): EventFilter;

    ContractUpgrade(newContract: null): EventFilter;

    Paused(): EventFilter;

    Unpaused(): EventFilter;

    Pause(): EventFilter;

    Unpause(): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;
  };

  estimateGas: {
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cfoAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "cfoAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    collectibles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collectibles(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ceoAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "ceoAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    implementsERC721(overrides?: CallOverrides): Promise<BigNumber>;

    "implementsERC721()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    collectiblePrintNumber(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collectiblePrintNumber(uint256)"(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setWithdrawalAddress(
      _newWithdrawalAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setWithdrawalAddress(address)"(
      _newWithdrawalAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    setCEO(_newCEO: string, overrides?: Overrides): Promise<BigNumber>;

    "setCEO(address)"(
      _newCEO: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCOO(_newCOO: string, overrides?: Overrides): Promise<BigNumber>;

    "setCOO(address)"(
      _newCOO: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(overrides?: Overrides): Promise<BigNumber>;

    "withdraw()"(overrides?: Overrides): Promise<BigNumber>;

    collectibleIssuedTime(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collectibleIssuedTime(uint256)"(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;

    mint(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    performProfitDistribution(
      _tokenId: BigNumberish,
      _collectionBaseItemId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "performProfitDistribution(uint256,uint256)"(
      _tokenId: BigNumberish,
      _collectionBaseItemId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    setCFO(_newCFO: string, overrides?: Overrides): Promise<BigNumber>;

    "setCFO(address)"(
      _newCFO: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    pushCollectible(
      _collectionBaseItemId: BigNumberish,
      _issuedTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "pushCollectible(uint256,uint256)"(
      _collectionBaseItemId: BigNumberish,
      _issuedTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dadaPercentageFirstBuy(overrides?: CallOverrides): Promise<BigNumber>;

    "dadaPercentageFirstBuy()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokensOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokensOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawBalance(overrides?: Overrides): Promise<BigNumber>;

    "withdrawBalance()"(overrides?: Overrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emitCollectibleIssuedEvent(
      _collectibleOwner: string,
      _purchaser: string,
      _collectibleId: BigNumberish,
      _collectionBaseItemId: BigNumberish,
      _issuedTime: BigNumberish,
      _printNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emitCollectibleIssuedEvent(address,address,uint256,uint256,uint256,uint256)"(
      _collectibleOwner: string,
      _purchaser: string,
      _collectibleId: BigNumberish,
      _collectionBaseItemId: BigNumberish,
      _issuedTime: BigNumberish,
      _printNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    collectionBaseItemPriceOf(
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collectionBaseItemPriceOf(uint256)"(
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    m_asset(overrides?: CallOverrides): Promise<BigNumber>;

    "m_asset()"(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeCollectionBaseItemModelContract(
      newCollectionBaseItemModelContractAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeCollectionBaseItemModelContract(address)"(
      newCollectionBaseItemModelContractAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    tokenLastPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenLastPrice(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    isCollectionBaseItemActive(
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isCollectionBaseItemActive(uint256)"(
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    setClaimEnabler(
      claimEnablerContractAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setClaimEnabler(address)"(
      claimEnablerContractAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeExhibitModelContract(
      newExhibitModelContractAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeExhibitModelContract(address)"(
      newExhibitModelContractAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    collectibleInfo(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "collectibleInfo(uint256)"(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchaseOneUnitInStock(
      _collectionBaseItemId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "purchaseOneUnitInStock(uint256)"(
      _collectionBaseItemId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      to: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cooAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "cooAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    m_collectionBaseItem(overrides?: CallOverrides): Promise<BigNumber>;

    "m_collectionBaseItem()"(overrides?: CallOverrides): Promise<BigNumber>;

    dadaPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "dadaPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeAssetModelContract(
      newAssetModelContractAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeAssetModelContract(address)"(
      newAssetModelContractAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenOwnerPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenOwnerPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    artistPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    "artistPercentage()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthorizationStatus(
      _authorizedAddress: string,
      _authorizedStatus: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAuthorizationStatus(address,bool)"(
      _authorizedAddress: string,
      _authorizedStatus: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    artistPercentageFirstBuy(overrides?: CallOverrides): Promise<BigNumber>;

    "artistPercentageFirstBuy()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getCollectionBaseItemId(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCollectionBaseItemId(uint256)"(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    m_exhibit(overrides?: CallOverrides): Promise<BigNumber>;

    "m_exhibit()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cfoAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cfoAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    collectibles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collectibles(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ceoAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ceoAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implementsERC721(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "implementsERC721()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectiblePrintNumber(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collectiblePrintNumber(uint256)"(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setWithdrawalAddress(
      _newWithdrawalAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWithdrawalAddress(address)"(
      _newWithdrawalAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    setCEO(
      _newCEO: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCEO(address)"(
      _newCEO: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCOO(
      _newCOO: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCOO(address)"(
      _newCOO: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    collectibleIssuedTime(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collectibleIssuedTime(uint256)"(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    mint(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    performProfitDistribution(
      _tokenId: BigNumberish,
      _collectionBaseItemId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "performProfitDistribution(uint256,uint256)"(
      _tokenId: BigNumberish,
      _collectionBaseItemId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    setCFO(
      _newCFO: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCFO(address)"(
      _newCFO: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pushCollectible(
      _collectionBaseItemId: BigNumberish,
      _issuedTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "pushCollectible(uint256,uint256)"(
      _collectionBaseItemId: BigNumberish,
      _issuedTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dadaPercentageFirstBuy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dadaPercentageFirstBuy()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokensOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawBalance(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawBalance()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emitCollectibleIssuedEvent(
      _collectibleOwner: string,
      _purchaser: string,
      _collectibleId: BigNumberish,
      _collectionBaseItemId: BigNumberish,
      _issuedTime: BigNumberish,
      _printNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emitCollectibleIssuedEvent(address,address,uint256,uint256,uint256,uint256)"(
      _collectibleOwner: string,
      _purchaser: string,
      _collectibleId: BigNumberish,
      _collectionBaseItemId: BigNumberish,
      _issuedTime: BigNumberish,
      _printNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    collectionBaseItemPriceOf(
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collectionBaseItemPriceOf(uint256)"(
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    m_asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "m_asset()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeCollectionBaseItemModelContract(
      newCollectionBaseItemModelContractAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeCollectionBaseItemModelContract(address)"(
      newCollectionBaseItemModelContractAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    tokenLastPrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenLastPrice(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCollectionBaseItemActive(
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isCollectionBaseItemActive(uint256)"(
      _collectionBaseItemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setClaimEnabler(
      claimEnablerContractAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setClaimEnabler(address)"(
      claimEnablerContractAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeExhibitModelContract(
      newExhibitModelContractAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeExhibitModelContract(address)"(
      newExhibitModelContractAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    collectibleInfo(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "collectibleInfo(uint256)"(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchaseOneUnitInStock(
      _collectionBaseItemId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "purchaseOneUnitInStock(uint256)"(
      _collectionBaseItemId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      to: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cooAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cooAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    m_collectionBaseItem(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "m_collectionBaseItem()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dadaPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dadaPercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeAssetModelContract(
      newAssetModelContractAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeAssetModelContract(address)"(
      newAssetModelContractAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenOwnerPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenOwnerPercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    artistPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "artistPercentage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAuthorizationStatus(
      _authorizedAddress: string,
      _authorizedStatus: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAuthorizationStatus(address,bool)"(
      _authorizedAddress: string,
      _authorizedStatus: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    artistPercentageFirstBuy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "artistPercentageFirstBuy()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "withdrawalAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getCollectionBaseItemId(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCollectionBaseItemId(uint256)"(
      _collectibleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    m_exhibit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "m_exhibit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
