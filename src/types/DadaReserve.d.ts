/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DadaReserveInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "OWNER_ROLE()": FunctionFragment;
    "acceptBidForCollectible(uint256,uint256,uint256)": FunctionFragment;
    "createRound(uint256,uint256[])": FunctionFragment;
    "executeRound(uint256,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "lock()": FunctionFragment;
    "locked()": FunctionFragment;
    "offerCollectibleForSale(uint256,uint256,uint256)": FunctionFragment;
    "offerCollectibleForSaleToAddress(uint256,uint256,uint256,address)": FunctionFragment;
    "purchaseNextExternal(uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "transfer(address,uint256,uint256)": FunctionFragment;
    "unlock()": FunctionFragment;
    "withdraw(address)": FunctionFragment;
    "withdrawFromDada()": FunctionFragment;
    "withdrawOfferForCollectible(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OWNER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptBidForCollectible",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRound",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRound",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "lock", values?: undefined): string;
  encodeFunctionData(functionFragment: "locked", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "offerCollectibleForSale",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offerCollectibleForSaleToAddress",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseNextExternal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unlock", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawFromDada",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOfferForCollectible",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptBidForCollectible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offerCollectibleForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerCollectibleForSaleToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseNextExternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromDada",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOfferForCollectible",
    data: BytesLike
  ): Result;

  events: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export class DadaReserve extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DadaReserveInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "OWNER_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    acceptBidForCollectible(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "acceptBidForCollectible(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createRound(
      roundId: BigNumberish,
      _roundToDrawingQty: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createRound(uint256,uint256[])"(
      roundId: BigNumberish,
      _roundToDrawingQty: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeRound(
      roundId: BigNumberish,
      minerTip: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeRound(uint256,uint256)"(
      roundId: BigNumberish,
      minerTip: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    lock(overrides?: Overrides): Promise<ContractTransaction>;

    "lock()"(overrides?: Overrides): Promise<ContractTransaction>;

    locked(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "locked()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    offerCollectibleForSale(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "offerCollectibleForSale(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    offerCollectibleForSaleToAddress(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "offerCollectibleForSaleToAddress(uint256,uint256,uint256,address)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    purchaseNextExternal(
      drawingId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "purchaseNextExternal(uint256)"(
      drawingId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transfer(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256,uint256)"(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlock(overrides?: Overrides): Promise<ContractTransaction>;

    "unlock()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdraw(to: string, overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawFromDada(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawFromDada()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawOfferForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawOfferForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

  OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

  "OWNER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  acceptBidForCollectible(
    drawingId: BigNumberish,
    minPrice: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "acceptBidForCollectible(uint256,uint256,uint256)"(
    drawingId: BigNumberish,
    minPrice: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createRound(
    roundId: BigNumberish,
    _roundToDrawingQty: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createRound(uint256,uint256[])"(
    roundId: BigNumberish,
    _roundToDrawingQty: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeRound(
    roundId: BigNumberish,
    minerTip: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeRound(uint256,uint256)"(
    roundId: BigNumberish,
    minerTip: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lock(overrides?: Overrides): Promise<ContractTransaction>;

  "lock()"(overrides?: Overrides): Promise<ContractTransaction>;

  locked(overrides?: CallOverrides): Promise<boolean>;

  "locked()"(overrides?: CallOverrides): Promise<boolean>;

  offerCollectibleForSale(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    minSalePriceInWei: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "offerCollectibleForSale(uint256,uint256,uint256)"(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    minSalePriceInWei: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  offerCollectibleForSaleToAddress(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    minSalePriceInWei: BigNumberish,
    toAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "offerCollectibleForSaleToAddress(uint256,uint256,uint256,address)"(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    minSalePriceInWei: BigNumberish,
    toAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  purchaseNextExternal(
    drawingId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "purchaseNextExternal(uint256)"(
    drawingId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transfer(
    to: string,
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256,uint256)"(
    to: string,
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlock(overrides?: Overrides): Promise<ContractTransaction>;

  "unlock()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdraw(to: string, overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw(address)"(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawFromDada(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawFromDada()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawOfferForCollectible(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawOfferForCollectible(uint256,uint256)"(
    drawingId: BigNumberish,
    printIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<string>;

    "OWNER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    acceptBidForCollectible(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptBidForCollectible(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createRound(
      roundId: BigNumberish,
      _roundToDrawingQty: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "createRound(uint256,uint256[])"(
      roundId: BigNumberish,
      _roundToDrawingQty: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeRound(
      roundId: BigNumberish,
      minerTip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeRound(uint256,uint256)"(
      roundId: BigNumberish,
      minerTip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lock(overrides?: CallOverrides): Promise<void>;

    "lock()"(overrides?: CallOverrides): Promise<void>;

    locked(overrides?: CallOverrides): Promise<boolean>;

    "locked()"(overrides?: CallOverrides): Promise<boolean>;

    offerCollectibleForSale(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "offerCollectibleForSale(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    offerCollectibleForSaleToAddress(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "offerCollectibleForSaleToAddress(uint256,uint256,uint256,address)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    purchaseNextExternal(
      drawingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "purchaseNextExternal(uint256)"(
      drawingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transfer(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transfer(address,uint256,uint256)"(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unlock(overrides?: CallOverrides): Promise<void>;

    "unlock()"(overrides?: CallOverrides): Promise<void>;

    withdraw(to: string, overrides?: CallOverrides): Promise<void>;

    "withdraw(address)"(to: string, overrides?: CallOverrides): Promise<void>;

    withdrawFromDada(overrides?: CallOverrides): Promise<void>;

    "withdrawFromDada()"(overrides?: CallOverrides): Promise<void>;

    withdrawOfferForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawOfferForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "OWNER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    acceptBidForCollectible(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "acceptBidForCollectible(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createRound(
      roundId: BigNumberish,
      _roundToDrawingQty: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createRound(uint256,uint256[])"(
      roundId: BigNumberish,
      _roundToDrawingQty: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeRound(
      roundId: BigNumberish,
      minerTip: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeRound(uint256,uint256)"(
      roundId: BigNumberish,
      minerTip: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(overrides?: Overrides): Promise<BigNumber>;

    "lock()"(overrides?: Overrides): Promise<BigNumber>;

    locked(overrides?: CallOverrides): Promise<BigNumber>;

    "locked()"(overrides?: CallOverrides): Promise<BigNumber>;

    offerCollectibleForSale(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "offerCollectibleForSale(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    offerCollectibleForSaleToAddress(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "offerCollectibleForSaleToAddress(uint256,uint256,uint256,address)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    purchaseNextExternal(
      drawingId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "purchaseNextExternal(uint256)"(
      drawingId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transfer(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256,uint256)"(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlock(overrides?: Overrides): Promise<BigNumber>;

    "unlock()"(overrides?: Overrides): Promise<BigNumber>;

    withdraw(to: string, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(address)"(to: string, overrides?: Overrides): Promise<BigNumber>;

    withdrawFromDada(overrides?: Overrides): Promise<BigNumber>;

    "withdrawFromDada()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawOfferForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawOfferForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OWNER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "OWNER_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptBidForCollectible(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "acceptBidForCollectible(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      minPrice: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createRound(
      roundId: BigNumberish,
      _roundToDrawingQty: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createRound(uint256,uint256[])"(
      roundId: BigNumberish,
      _roundToDrawingQty: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeRound(
      roundId: BigNumberish,
      minerTip: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeRound(uint256,uint256)"(
      roundId: BigNumberish,
      minerTip: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(overrides?: Overrides): Promise<PopulatedTransaction>;

    "lock()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    locked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "locked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offerCollectibleForSale(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "offerCollectibleForSale(uint256,uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    offerCollectibleForSaleToAddress(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "offerCollectibleForSaleToAddress(uint256,uint256,uint256,address)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      minSalePriceInWei: BigNumberish,
      toAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    purchaseNextExternal(
      drawingId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "purchaseNextExternal(uint256)"(
      drawingId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256,uint256)"(
      to: string,
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlock(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unlock()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdraw(to: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawFromDada(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawFromDada()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawOfferForCollectible(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawOfferForCollectible(uint256,uint256)"(
      drawingId: BigNumberish,
      printIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
