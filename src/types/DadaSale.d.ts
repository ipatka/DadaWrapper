/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DadaSaleInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "allowList(uint256,address)": FunctionFragment;
    "capsPerDrawing(uint256,uint256)": FunctionFragment;
    "dadaNftReceiver()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "priceLists(uint256,uint256)": FunctionFragment;
    "purchase(uint256,uint256,uint256)": FunctionFragment;
    "purchases(uint256,address,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAllowList(uint256,address[],bool)": FunctionFragment;
    "setContractState(bool[])": FunctionFragment;
    "setDrawingCap(uint256,uint256[2][])": FunctionFragment;
    "setNftReceiver(address)": FunctionFragment;
    "setPriceList(uint256,uint256[2][])": FunctionFragment;
    "setSwapList(uint256[3][],bool)": FunctionFragment;
    "state(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "swapList(uint256)": FunctionFragment;
    "swapReserved(uint256)": FunctionFragment;
    "swapToken(uint256)": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowList",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "capsPerDrawing",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dadaNftReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "priceLists",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchases",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowList",
    values: [BigNumberish, string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractState",
    values: [boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDrawingCap",
    values: [BigNumberish, [BigNumberish, BigNumberish][]]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceList",
    values: [BigNumberish, [BigNumberish, BigNumberish][]]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapList",
    values: [[BigNumberish, BigNumberish, BigNumberish][], boolean]
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapReserved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "capsPerDrawing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dadaNftReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceLists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchases", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDrawingCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapReserved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export class DadaSale extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DadaSaleInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    allowList(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "allowList(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    capsPerDrawing(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "capsPerDrawing(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    dadaNftReceiver(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "dadaNftReceiver()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    priceLists(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "priceLists(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    purchase(
      _round: BigNumberish,
      _drawingId: BigNumberish,
      _printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "purchase(uint256,uint256,uint256)"(
      _round: BigNumberish,
      _drawingId: BigNumberish,
      _printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    purchases(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "purchases(uint256,address,uint256)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAllowList(
      _round: BigNumberish,
      _buyers: string[],
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAllowList(uint256,address[],bool)"(
      _round: BigNumberish,
      _buyers: string[],
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setContractState(
      _stateEnabled: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setContractState(bool[])"(
      _stateEnabled: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDrawingCap(
      _round: BigNumberish,
      _drawingCap: [BigNumberish, BigNumberish][],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDrawingCap(uint256,uint256[2][])"(
      _round: BigNumberish,
      _drawingCap: [BigNumberish, BigNumberish][],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setNftReceiver(
      _dadaNftReceiverAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setNftReceiver(address)"(
      _dadaNftReceiverAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPriceList(
      _round: BigNumberish,
      _drawingPrice: [BigNumberish, BigNumberish][],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPriceList(uint256,uint256[2][])"(
      _round: BigNumberish,
      _drawingPrice: [BigNumberish, BigNumberish][],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSwapList(
      _tokenDrawingPrint: [BigNumberish, BigNumberish, BigNumberish][],
      enabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSwapList(uint256[3][],bool)"(
      _tokenDrawingPrint: [BigNumberish, BigNumberish, BigNumberish][],
      enabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    state(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "state(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    swapList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      DrawingId: BigNumber;
      PrintIndex: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "swapList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      DrawingId: BigNumber;
      PrintIndex: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    swapReserved(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "swapReserved(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    swapToken(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapToken(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(_to: string, overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

  allowList(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "allowList(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  capsPerDrawing(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "capsPerDrawing(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dadaNftReceiver(overrides?: CallOverrides): Promise<string>;

  "dadaNftReceiver()"(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  priceLists(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "priceLists(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  purchase(
    _round: BigNumberish,
    _drawingId: BigNumberish,
    _printIndex: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "purchase(uint256,uint256,uint256)"(
    _round: BigNumberish,
    _drawingId: BigNumberish,
    _printIndex: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  purchases(
    arg0: BigNumberish,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "purchases(uint256,address,uint256)"(
    arg0: BigNumberish,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAllowList(
    _round: BigNumberish,
    _buyers: string[],
    _allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAllowList(uint256,address[],bool)"(
    _round: BigNumberish,
    _buyers: string[],
    _allowed: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setContractState(
    _stateEnabled: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setContractState(bool[])"(
    _stateEnabled: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDrawingCap(
    _round: BigNumberish,
    _drawingCap: [BigNumberish, BigNumberish][],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDrawingCap(uint256,uint256[2][])"(
    _round: BigNumberish,
    _drawingCap: [BigNumberish, BigNumberish][],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setNftReceiver(
    _dadaNftReceiverAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setNftReceiver(address)"(
    _dadaNftReceiverAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPriceList(
    _round: BigNumberish,
    _drawingPrice: [BigNumberish, BigNumberish][],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPriceList(uint256,uint256[2][])"(
    _round: BigNumberish,
    _drawingPrice: [BigNumberish, BigNumberish][],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSwapList(
    _tokenDrawingPrint: [BigNumberish, BigNumberish, BigNumberish][],
    enabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSwapList(uint256[3][],bool)"(
    _tokenDrawingPrint: [BigNumberish, BigNumberish, BigNumberish][],
    enabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  state(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "state(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swapList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    DrawingId: BigNumber;
    PrintIndex: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "swapList(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    DrawingId: BigNumber;
    PrintIndex: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  swapReserved(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "swapReserved(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swapToken(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapToken(uint256)"(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(_to: string, overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw(address)"(
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

    allowList(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "allowList(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    capsPerDrawing(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "capsPerDrawing(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dadaNftReceiver(overrides?: CallOverrides): Promise<string>;

    "dadaNftReceiver()"(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    priceLists(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceLists(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchase(
      _round: BigNumberish,
      _drawingId: BigNumberish,
      _printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "purchase(uint256,uint256,uint256)"(
      _round: BigNumberish,
      _drawingId: BigNumberish,
      _printIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    purchases(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "purchases(uint256,address,uint256)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowList(
      _round: BigNumberish,
      _buyers: string[],
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAllowList(uint256,address[],bool)"(
      _round: BigNumberish,
      _buyers: string[],
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractState(
      _stateEnabled: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setContractState(bool[])"(
      _stateEnabled: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    setDrawingCap(
      _round: BigNumberish,
      _drawingCap: [BigNumberish, BigNumberish][],
      overrides?: CallOverrides
    ): Promise<void>;

    "setDrawingCap(uint256,uint256[2][])"(
      _round: BigNumberish,
      _drawingCap: [BigNumberish, BigNumberish][],
      overrides?: CallOverrides
    ): Promise<void>;

    setNftReceiver(
      _dadaNftReceiverAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setNftReceiver(address)"(
      _dadaNftReceiverAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceList(
      _round: BigNumberish,
      _drawingPrice: [BigNumberish, BigNumberish][],
      overrides?: CallOverrides
    ): Promise<void>;

    "setPriceList(uint256,uint256[2][])"(
      _round: BigNumberish,
      _drawingPrice: [BigNumberish, BigNumberish][],
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapList(
      _tokenDrawingPrint: [BigNumberish, BigNumberish, BigNumberish][],
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSwapList(uint256[3][],bool)"(
      _tokenDrawingPrint: [BigNumberish, BigNumberish, BigNumberish][],
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    state(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "state(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swapList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      DrawingId: BigNumber;
      PrintIndex: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "swapList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      DrawingId: BigNumber;
      PrintIndex: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    swapReserved(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "swapReserved(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swapToken(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "swapToken(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(_to: string, overrides?: CallOverrides): Promise<void>;

    "withdraw(address)"(_to: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowList(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowList(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    capsPerDrawing(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "capsPerDrawing(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dadaNftReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    "dadaNftReceiver()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceLists(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceLists(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchase(
      _round: BigNumberish,
      _drawingId: BigNumberish,
      _printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "purchase(uint256,uint256,uint256)"(
      _round: BigNumberish,
      _drawingId: BigNumberish,
      _printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    purchases(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "purchases(uint256,address,uint256)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAllowList(
      _round: BigNumberish,
      _buyers: string[],
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAllowList(uint256,address[],bool)"(
      _round: BigNumberish,
      _buyers: string[],
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setContractState(
      _stateEnabled: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setContractState(bool[])"(
      _stateEnabled: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDrawingCap(
      _round: BigNumberish,
      _drawingCap: [BigNumberish, BigNumberish][],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDrawingCap(uint256,uint256[2][])"(
      _round: BigNumberish,
      _drawingCap: [BigNumberish, BigNumberish][],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setNftReceiver(
      _dadaNftReceiverAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setNftReceiver(address)"(
      _dadaNftReceiverAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPriceList(
      _round: BigNumberish,
      _drawingPrice: [BigNumberish, BigNumberish][],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPriceList(uint256,uint256[2][])"(
      _round: BigNumberish,
      _drawingPrice: [BigNumberish, BigNumberish][],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSwapList(
      _tokenDrawingPrint: [BigNumberish, BigNumberish, BigNumberish][],
      enabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSwapList(uint256[3][],bool)"(
      _tokenDrawingPrint: [BigNumberish, BigNumberish, BigNumberish][],
      enabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    state(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "state(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "swapList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapReserved(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapReserved(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapToken(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapToken(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(_to: string, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(address)"(_to: string, overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "OPERATOR_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowList(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowList(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    capsPerDrawing(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "capsPerDrawing(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dadaNftReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dadaNftReceiver()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceLists(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceLists(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchase(
      _round: BigNumberish,
      _drawingId: BigNumberish,
      _printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "purchase(uint256,uint256,uint256)"(
      _round: BigNumberish,
      _drawingId: BigNumberish,
      _printIndex: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    purchases(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "purchases(uint256,address,uint256)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAllowList(
      _round: BigNumberish,
      _buyers: string[],
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAllowList(uint256,address[],bool)"(
      _round: BigNumberish,
      _buyers: string[],
      _allowed: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setContractState(
      _stateEnabled: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setContractState(bool[])"(
      _stateEnabled: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDrawingCap(
      _round: BigNumberish,
      _drawingCap: [BigNumberish, BigNumberish][],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDrawingCap(uint256,uint256[2][])"(
      _round: BigNumberish,
      _drawingCap: [BigNumberish, BigNumberish][],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setNftReceiver(
      _dadaNftReceiverAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setNftReceiver(address)"(
      _dadaNftReceiverAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPriceList(
      _round: BigNumberish,
      _drawingPrice: [BigNumberish, BigNumberish][],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPriceList(uint256,uint256[2][])"(
      _round: BigNumberish,
      _drawingPrice: [BigNumberish, BigNumberish][],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSwapList(
      _tokenDrawingPrint: [BigNumberish, BigNumberish, BigNumberish][],
      enabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSwapList(uint256[3][],bool)"(
      _tokenDrawingPrint: [BigNumberish, BigNumberish, BigNumberish][],
      enabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    state(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "state(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "swapList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapReserved(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "swapReserved(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapToken(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapToken(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(_to: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
